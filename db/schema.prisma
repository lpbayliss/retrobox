// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ownedTeams    Team[]        @relation("TeamOwner")
  teams         Team[]
  boxesCreated  Box[]
  itemsCreated  Item[]
  dropsCreated  Drop[]
  ItemComment   ItemComment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ItemComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy User?    @relation(fields: [userId], references: [id])
  content   String
  Item      Item?    @relation(fields: [itemId], references: [id])

  userId String?
  itemId String?
}

model Item {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  createdBy User?         @relation(fields: [userId], references: [id])
  content   String
  comments  ItemComment[]
  Drop      Drop?         @relation(fields: [dropId], references: [id])

  userId        String?
  itemCommentId String
  dropId        String?
  Box           Box?    @relation(fields: [boxId], references: [id])
  boxId         String?
}

model Drop {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [userId], references: [id])
  items     Item[]

  userId String
}

model Box {
  id        String @id @default(cuid())
  name      String
  team      Team?  @relation(fields: [teamId], references: [id])
  createdBy User   @relation(fields: [userId], references: [id])
  items     Item[]

  teamId String?
  userId String
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  owner     User     @relation("TeamOwner", fields: [ownerId], references: [id])
  members   User[]
  Box       Box[]

  ownerId String
}
