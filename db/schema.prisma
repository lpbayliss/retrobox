// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  projectsCreated Project[]      @relation(name: "projectCreatedByUserId")
  itemsCreated    Item[]         @relation(name: "itemCreatedByUserId")
  itemReactions   ItemReaction[] @relation(name: "itemReactionByUserId")
  itemComments    ItemComment[]  @relation(name: "itemCommentByUserId")
  cyclesCreated   Cycle[]        @relation(name: "cycleCreatedByUserId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Reaction {
  LIKE
  DISLIKE
}

model ItemReaction {
  id           String   @id @default(cuid())
  reactionType Reaction
  item         Item?    @relation(fields: [itemId], references: [id])
  user         User?    @relation(name: "itemReactionByUserId", fields: [userId], references: [id])

  itemId String?
  userId String?
}

model ItemComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy User?    @relation(name: "itemCommentByUserId", fields: [userId], references: [id])
  Item      Item?    @relation(fields: [itemId], references: [id])
  content   String

  userId String?
  itemId String?
}

model Item {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    User?          @relation(name: "itemCreatedByUserId", fields: [userId], references: [id])
  content      String
  comments     ItemComment[]
  itemReaction ItemReaction[]
  cycle        Cycle?         @relation(fields: [cycleId], references: [id])

  userId  String?
  cycleId String?
}

enum CycleStatus {
  PENDING
  OPEN
  CLOSED
}

model Cycle {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  createdBy User        @relation(name: "cycleCreatedByUserId", fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime?
  project   Project     @relation(fields: [projectId], references: [id])
  items     Item[]
  isPublic  Boolean
  status    CycleStatus @default(PENDING)

  userId    String
  projectId String
}

model Project {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(name: "projectCreatedByUserId", fields: [userId], references: [id])
  isPublic  Boolean

  userId String
  cycles Cycle[]
}
